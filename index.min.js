class React{constructor(a){this.formData=a,this.formStepsList=[],this.formData=""}init(){return this.initReact(this.formData)}elementCreate(a){let b="";return a.forEach(a=>{switch(a.name){case"heading":b+=this.heading(a);break;case"paragraph":b+=this.paragriph(a);break;case"text":b+=this.text(a);break;case"number":b+=this.number(a);break;case"email":b+=this.text(a);break;case"textarea":b+=this.textarea(a);break;case"pagebreak":b+=this.pagebreak(a);break;case"radio":b+=this.radio(a);break;case"checkbox":b+=this.checkbox(a);break;case"selectlist":b+=this.selectlist(a);break;case"date":b+=this.date(a);break;case"file":b+=this.file(a);break;case"button":b+=this.button(a);break;case"recaptcha":b+=this.recaptcha(a);break;case"spacer":b+=this.spacer(a);break;case"signature":b+=this.signature(a);break;default:b+="";}}),b}formInit(a){return this.classReact(a)}importsReact(){return`
		import React, { Component } from 'react'

		`}initReact(a){return`
		${this.importsReact()}
		export default class Formulario extends Component {
			${this.constructorReact()+this.componentDidupdateReact()+this.componentWillMountReact()+this.functionsReact()+this.initRenderReact(a)}
		}

		`}constructorReact(){return`
			constructor() {
				super();
				this.state = {
					exemplo: false,
					page: 0
				};
			}

		`}componentWillMountReact(){return`
		componentWillMount() {
			this.setState({ exemplo: true, page: 0 });
		}

		`}componentDidupdateReact(){return`
		componentDidUpdate(prevProps, prevState) {
			if (prevState.page != this.state.page){
				
				for (let field of document.getElementsByTagName("fieldset")){
					if (parseInt(field.getAttribute('data-index')) == this.state.page){
						
						field.classList.remove("hidden")
						field.classList.add("show")
					}else{
						field.classList.remove("show")
						field.classList.add("hidden")
					}
				}

				let steps = document.querySelectorAll('.step')

				for (var i = 0; i < steps.length; ++i){
					if (parseInt(steps[i].getAttribute('data-step')) == this.state.page){
						steps[i].classList.add("current")
					}else{
						steps[i].classList.remove("current")
					}
				}
			}
		}

		`}functionsReact(){return`
		submit ()  {
			alert("submitou")
		}

		next ()  {
			this.setState({page: this.state.page + 1})
		}

		previous ()  {
			this.setState({page: this.state.page - 1})
		}

		`}initRenderReact(a){return`
			render(){
				return (
					${this.formReact(a)}
				)
			}
		`}heading(a){return`
		<div className="${a.fields.containerClass.value}">
			<h3 className="legend">${a.fields.text.value}</h3>
		</div>

		`}paragriph(a){return`
		<div className="${a.fields.containerClass.value}">
			<p>${a.fields.text.value}</p>
		</div>

		`}text(a){return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group">
				<label  className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">${a.fields.label.value}</label>
				<input type="${a.name}" id="${a.fields.id.value}" name="${a.fields.id.value}" data-alias="${a.fields.alias.value}" placeholder="${a.fields.placeholder.value}" className="${a.fields.cssClass.value}" />
			</div>
		</div>

		`}number(a){return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group">
				<label  className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">${a.fields.label.value}</label>
				<input type="number" id="${a.fields.id.value}" name="${a.fields.id.value}" value="" data-alias="${a.fields.alias.value}"  className="${a.fields.cssClass.value}" />
			</div>
		</div>
		`}spacer(a){return`
		<div className="${a.fields.containerClass.value}">
			<div style="{{height: ${a.fields.height.value}}}" ></div>
		</div>
		`}textarea(a){return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group">
				<label  className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">${a.fields.label.value}</label>
				<textarea type="${a.name}" rows="${a.fields.fieldSize.value}" id="${a.fields.id.value}" name="${a.fields.id.value}" data-alias="${a.fields.alias.value}" placeholder="${a.fields.placeholder.value}" className="${a.fields.cssClass.value}" />
			</div>
		</div>

		`}formStepsActions(a){if(1==a)return`<div className="form-action ${data.fields.containerClass.value}">
				<button onClick={() => this.next()} type="button" className="btn btn-primary next" >Seguinte</button>
			</div>`;return a<this.formStepsList.length?`<div className="form-action ${data.fields.containerClass.value}">
				<button onClick={() => this.previous()} type="button" className="btn btn-primary previous" >Anterior</button>
				<button onClick={() => this.next()} type="button" className="btn btn-primary next" >Seguinte</button>
			</div>`:``}pagebreak(a){let b=a.fields.id.value.split("_"),c=this.formStepsActions(parseInt(b[1]));return`
				${c}
		</fieldset>
		<fieldset className="row" data-index="${b[1]}">				
		`}radio(a){let b="";return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group"> 
				<label className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">${a.fields.label.value}</label>
					${a.fields.radios.value.forEach((c,d)=>{b+=`<div className="radio ">
							<input type="radio" name="${a.fields.id.value}_${c[d]}" id="${a.fields.id.value}_${c[d]}" defaultValue="Azul" data-alias="" defaultChecked />
								<label htmlFor="${a.fields.id.value}_${d}" className="${a.fields.cssClass.value}">
									${c.split("|")[0]}
								</label>
							</div>
							`})}
					${b}
				<span id="${a.fields.id.value}"></span>
			</div>
		</div>

		`}checkbox(a){let b="";return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group"> 
				<label className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">${a.fields.label.value}</label>
				${a.fields.checkboxes.value.forEach((c,d)=>{b+=`<div className="checkbox ">
						<input type="checkbox" name="${a.fields.id.value}[]" id="${a.fields.id.value}_${c[d]}" defaultValue="${c}" data-alias="" defaultChecked />
						<label htmlFor="${a.fields.id.value}_${c[d]}" className="checkbox-inline">
							${c.split("|")[0]} </label>
					</div>
					`})}
				${b}
				<span id="${a.fields.id.value}"></span>
			</div>
		</div>

		`}selectlist(a){let b="";return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group">
				<label className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">${a.fields.label.value}</label>
				<select id="${a.fields.id.value}" name="${a.fields.id.value}[]" data-alias=""  className="${a.fields.cssClass.value}">
					${a.fields.options.value.forEach(a=>{b+=`<option>${a.split("|")[0]}</option>

						`})}
					${b}
				</select>
			</div>
		</div>

		`}date(a){return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group">
				<label className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">${a.fields.label.value}</label>
				<input type="date" id="${a.fields.id.value}" name="${a.fields.id.value}" defaultValue="" data-alias="" className="${a.fields.cssClass.value}" />
			</div>
		</div>

		`}file(a){return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group">
				<label className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">${a.fields.label.value}</label>
				<input type="file" id="${a.fields.id.value}" name="${a.fields.id.value}[]" data-alias="" accept=".gif, .jpg, .png" />
			</div>
		</div>

		`}signature(a){return`
		<div className="${a.fields.containerClass.value}">
			<div className="form-group">
				<label  className="${a.fields.labelClass.value}" htmlFor="${a.fields.id.value}">Signature</label>
				<div className="signature-pad">
					<canvas id="${a.fields.id.value}" width="${a.fields.width.value}" height="${a.fields.height.value}" data-color="${a.fields.color.value}" ></canvas>
				</div>
				
				<div className="signature-pad-actions">
					<button type="button" id="clear_${a.fields.id.value}" name="clear_${a.fields.id.value}" className="btn btn-sm btn-default btn-clear" data-exclude="true">Apagar</button>
					<button type="button" id="undo_${a.fields.id.value}" name="undo_${a.fields.id.value}" className="btn btn-sm btn-default btn-undo" data-exclude="true">Undo</button>
				</div>
				<input type="hidden" name="hidden_${a.fields.id.value}" id="hidden_${a.fields.id.value}" value="" data-alias="${a.fields.alias.value}" data-label="${a.fields.id.value}"  />
			</div>
		</div>
		`}recaptcha(a){return`
		<div className="form-group ${a.fields.containerClass.value}">
			<div id="${a.fields.id.value}" className="g-recaptcha" data-sitekey="6Lf5Tt4ZAAAAAPCMN7WSRFSpb40H4tWNU9FcTuwI" data-theme="${!0===a.fields.theme.value[0].selected?a.fields.theme.value[0].value:a.fields.theme.value[1].value}" data-type="${!0===a.fields.theme.value[0].selected?a.fields.type.value[0].value:a.fields.type.value[1].value}" data-size="${!0===a.fields.size.value[0].selected?a.fields.size.value[0].value:a.fields.size.value[1].value}"></div>
		</div>
		`}formReact(a){return`
		<div className="container">
			<div className="row">
				<div className="col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3">
					<div className="form-view">
						<div className="panel panel-default">
							
							<div className="panel-body">
								<div className="form-container">
									<div id="messages"></div>
									<form action="#" method="post" encType="multipart/form-data" id="form-app">
										${"undefined"==typeof a.settings.formSteps?"":this.formSteps(a.settings.formSteps)}
										<fieldset className="row" data-index="0">
										${this.elementCreate(a.initForm)}
										</fieldset>
									</form>
									${"undefined"==typeof a.settings.formSteps.progressBar?"":this.progressBar()}
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		`}button(a){return`
		<div class="${a.fields.containerClass.value}">
		${0<this.formStepsList.length?`
				<button onClick={() => this.previous()} type="button" className="btn btn-primary previous" >Anterior</button>
			`:``}
		<button onClick={() => this.submit()} type="button" id="${a.fields.id.value}" name="${a.fields.id.value}" className="${a.fields.cssClass.value}">Enviar</button>
		</div>
		`}formSteps(a){let b="";return this.formStepsList=a.fields.steps.value,`
		<div className="steps">
			${a.fields.steps.value.forEach((a,c)=>{b+=`<div className="step ${0==c?"current":""}" data-step="${c}">
					<div className="stage">${c+1}</div> 
					<div className="title">${a}</div>
				</div>
				`})}
			${b}
		</div>

		`}progressBar(){return`
		<div id="progress" className="progress" style={{display: "none"}}>
			<div id="bar" className="progress-bar" role="progressbar" style={{width: 0}}>
				<span id="percent" className="sr-only">0% Complete</span>
			</div>
		</div>

		`}}function initInterpretador(a="react",b={}){let c;return"react"==a&&(c=new React(b)),c.init()}
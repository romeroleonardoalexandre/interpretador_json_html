class React{constructor(t){this.formData=t,this.formStepsList=[],this.formData=""}init(){return this.initReact(this.formData)}elementCreate(t){let e="";return t.forEach(t=>{switch(t.name){case"heading":e+=this.heading(t);break;case"paragraph":e+=this.paragriph(t);break;case"text":e+=this.text(t);break;case"number":e+=this.number(t);break;case"email":e+=this.text(t);break;case"textarea":e+=this.textarea(t);break;case"pagebreak":e+=this.pagebreak(t);break;case"radio":e+=this.radio(t);break;case"checkbox":e+=this.checkbox(t);break;case"selectlist":e+=this.selectlist(t);break;case"date":e+=this.date(t);break;case"file":e+=this.file(t);break;case"button":e+=this.button(t);break;case"recaptcha":e+=this.recaptcha(t);break;case"spacer":e+=this.spacer(t);break;case"signature":e+=this.signature(t);break;default:e+=""}}),e}formInit(t){return this.classReact(t)}importsReact(){return"\n\t\timport React, { Component } from 'react'\n\n\t\t"}initReact(t){return`\n\t\t${this.importsReact()}\n\t\texport default class Formulario extends Component {\n\t\t\t${this.constructorReact()+this.componentDidupdateReact()+this.componentWillMountReact()+this.functionsReact()+this.initRenderReact(t)}\n\t\t}\n\n\t\t`}constructorReact(){return"\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.state = {\n\t\t\t\t\texemplo: false,\n\t\t\t\t\tpage: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t"}componentWillMountReact(){return"\n\t\tcomponentWillMount() {\n\t\t\tthis.setState({ exemplo: true, page: 0 });\n\t\t}\n\n\t\t"}componentDidupdateReact(){return'\n\t\tcomponentDidUpdate(prevProps, prevState) {\n\t\t\tif (prevState.page != this.state.page){\n\t\t\t\t\n\t\t\t\tfor (let field of document.getElementsByTagName("fieldset")){\n\t\t\t\t\tif (parseInt(field.getAttribute(\'data-index\')) == this.state.page){\n\t\t\t\t\t\t\n\t\t\t\t\t\tfield.classList.remove("hidden")\n\t\t\t\t\t\tfield.classList.add("show")\n\t\t\t\t\t}else{\n\t\t\t\t\t\tfield.classList.remove("show")\n\t\t\t\t\t\tfield.classList.add("hidden")\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet steps = document.querySelectorAll(\'.step\')\n\n\t\t\t\tfor (var i = 0; i < steps.length; ++i){\n\t\t\t\t\tif (parseInt(steps[i].getAttribute(\'data-step\')) == this.state.page){\n\t\t\t\t\t\tsteps[i].classList.add("current")\n\t\t\t\t\t}else{\n\t\t\t\t\t\tsteps[i].classList.remove("current")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t'}functionsReact(){return'\n\t\tsubmit ()  {\n\t\t\talert("submitou")\n\t\t}\n\n\t\tnext ()  {\n\t\t\tthis.setState({page: this.state.page + 1})\n\t\t}\n\n\t\tprevious ()  {\n\t\t\tthis.setState({page: this.state.page - 1})\n\t\t}\n\n\t\t'}initRenderReact(t){return`\n\t\t\trender(){\n\t\t\t\treturn (\n\t\t\t\t\t${this.formReact(t)}\n\t\t\t\t)\n\t\t\t}\n\t\t`}heading(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<h3 className="legend">${t.fields.text.value}</h3>\n\t\t</div>\n\n\t\t`}paragriph(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<p>${t.fields.text.value}</p>\n\t\t</div>\n\n\t\t`}text(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group">\n\t\t\t\t<label  className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">${t.fields.label.value}</label>\n\t\t\t\t<input type="${t.name}" id="${t.fields.id.value}" name="${t.fields.id.value}" data-alias="${t.fields.alias.value}" placeholder="${t.fields.placeholder.value}" className="${t.fields.cssClass.value}" />\n\t\t\t</div>\n\t\t</div>\n\n\t\t`}number(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group">\n\t\t\t\t<label  className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">${t.fields.label.value}</label>\n\t\t\t\t<input type="number" id="${t.fields.id.value}" name="${t.fields.id.value}" value="" data-alias="${t.fields.alias.value}"  className="${t.fields.cssClass.value}" />\n\t\t\t</div>\n\t\t</div>\n\t\t`}spacer(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div style="{{height: ${t.fields.height.value}}}" ></div>\n\t\t</div>\n\t\t`}textarea(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group">\n\t\t\t\t<label  className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">${t.fields.label.value}</label>\n\t\t\t\t<textarea type="${t.name}" rows="${t.fields.fieldSize.value}" id="${t.fields.id.value}" name="${t.fields.id.value}" data-alias="${t.fields.alias.value}" placeholder="${t.fields.placeholder.value}" className="${t.fields.cssClass.value}" />\n\t\t\t</div>\n\t\t</div>\n\n\t\t`}formStepsActions(t){return 1==t?`<div className="form-action ${data.fields.containerClass.value}">\n\t\t\t\t<button onClick={() => this.next()} type="button" className="btn btn-primary next" >Seguinte</button>\n\t\t\t</div>`:t<this.formStepsList.length?`<div className="form-action ${data.fields.containerClass.value}">\n\t\t\t\t<button onClick={() => this.previous()} type="button" className="btn btn-primary previous" >Anterior</button>\n\t\t\t\t<button onClick={() => this.next()} type="button" className="btn btn-primary next" >Seguinte</button>\n\t\t\t</div>`:""}pagebreak(t){let e=t.fields.id.value.split("_");return`\n\t\t\t\t${this.formStepsActions(parseInt(e[1]))}\n\t\t</fieldset>\n\t\t<fieldset className="row" data-index="${e[1]}">\t\t\t\t\n\t\t`}radio(t){let e="";return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group"> \n\t\t\t\t<label className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">${t.fields.label.value}</label>\n\t\t\t\t\t${t.fields.radios.value.forEach((a,s)=>{e+=`<div className="radio ">\n\t\t\t\t\t\t\t<input type="radio" name="${t.fields.id.value}_${a[s]}" id="${t.fields.id.value}_${a[s]}" defaultValue="Azul" data-alias="" defaultChecked />\n\t\t\t\t\t\t\t\t<label htmlFor="${t.fields.id.value}_${s}" className="${t.fields.cssClass.value}">\n\t\t\t\t\t\t\t\t\t${a.split("|")[0]}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t`})}\n\t\t\t\t\t${e}\n\t\t\t\t<span id="${t.fields.id.value}"></span>\n\t\t\t</div>\n\t\t</div>\n\n\t\t`}checkbox(t){let e="";return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group"> \n\t\t\t\t<label className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">${t.fields.label.value}</label>\n\t\t\t\t${t.fields.checkboxes.value.forEach((a,s)=>{e+=`<div className="checkbox ">\n\t\t\t\t\t\t<input type="checkbox" name="${t.fields.id.value}[]" id="${t.fields.id.value}_${a[s]}" defaultValue="${a}" data-alias="" defaultChecked />\n\t\t\t\t\t\t<label htmlFor="${t.fields.id.value}_${a[s]}" className="checkbox-inline">\n\t\t\t\t\t\t\t${a.split("|")[0]} </label>\n\t\t\t\t\t</div>\n\t\t\t\t\t`})}\n\t\t\t\t${e}\n\t\t\t\t<span id="${t.fields.id.value}"></span>\n\t\t\t</div>\n\t\t</div>\n\n\t\t`}selectlist(t){let e="";return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group">\n\t\t\t\t<label className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">${t.fields.label.value}</label>\n\t\t\t\t<select id="${t.fields.id.value}" name="${t.fields.id.value}[]" data-alias=""  className="${t.fields.cssClass.value}">\n\t\t\t\t\t${t.fields.options.value.forEach(t=>{e+=`<option>${t.split("|")[0]}</option>\n\n\t\t\t\t\t\t`})}\n\t\t\t\t\t${e}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\n\t\t`}date(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group">\n\t\t\t\t<label className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">${t.fields.label.value}</label>\n\t\t\t\t<input type="date" id="${t.fields.id.value}" name="${t.fields.id.value}" defaultValue="" data-alias="" className="${t.fields.cssClass.value}" />\n\t\t\t</div>\n\t\t</div>\n\n\t\t`}file(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group">\n\t\t\t\t<label className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">${t.fields.label.value}</label>\n\t\t\t\t<input type="file" id="${t.fields.id.value}" name="${t.fields.id.value}[]" data-alias="" accept=".gif, .jpg, .png" />\n\t\t\t</div>\n\t\t</div>\n\n\t\t`}signature(t){return`\n\t\t<div className="${t.fields.containerClass.value}">\n\t\t\t<div className="form-group">\n\t\t\t\t<label  className="${t.fields.labelClass.value}" htmlFor="${t.fields.id.value}">Signature</label>\n\t\t\t\t<div className="signature-pad">\n\t\t\t\t\t<canvas id="${t.fields.id.value}" width="${t.fields.width.value}" height="${t.fields.height.value}" data-color="${t.fields.color.value}" ></canvas>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className="signature-pad-actions">\n\t\t\t\t\t<button type="button" id="clear_${t.fields.id.value}" name="clear_${t.fields.id.value}" className="btn btn-sm btn-default btn-clear" data-exclude="true">Apagar</button>\n\t\t\t\t\t<button type="button" id="undo_${t.fields.id.value}" name="undo_${t.fields.id.value}" className="btn btn-sm btn-default btn-undo" data-exclude="true">Undo</button>\n\t\t\t\t</div>\n\t\t\t\t<input type="hidden" name="hidden_${t.fields.id.value}" id="hidden_${t.fields.id.value}" value="" data-alias="${t.fields.alias.value}" data-label="${t.fields.id.value}"  />\n\t\t\t</div>\n\t\t</div>\n\t\t`}recaptcha(t){return`\n\t\t<div className="form-group ${t.fields.containerClass.value}">\n\t\t\t<div id="${t.fields.id.value}" className="g-recaptcha" data-sitekey="6Lf5Tt4ZAAAAAPCMN7WSRFSpb40H4tWNU9FcTuwI" data-theme="${!0===t.fields.theme.value[0].selected?t.fields.theme.value[0].value:t.fields.theme.value[1].value}" data-type="${!0===t.fields.theme.value[0].selected?t.fields.type.value[0].value:t.fields.type.value[1].value}" data-size="${!0===t.fields.size.value[0].selected?t.fields.size.value[0].value:t.fields.size.value[1].value}"></div>\n\t\t</div>\n\t\t`}formReact(t){return`\n\t\t<div className="container">\n\t\t\t<div className="row">\n\t\t\t\t<div className="col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3">\n\t\t\t\t\t<div className="form-view">\n\t\t\t\t\t\t<div className="panel panel-default">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div className="panel-body">\n\t\t\t\t\t\t\t\t<div className="form-container">\n\t\t\t\t\t\t\t\t\t<div id="messages"></div>\n\t\t\t\t\t\t\t\t\t<form action="#" method="post" encType="multipart/form-data" id="form-app">\n\t\t\t\t\t\t\t\t\t\t${void 0!==t.settings.formSteps?this.formSteps(t.settings.formSteps):""}\n\t\t\t\t\t\t\t\t\t\t<fieldset className="row" data-index="0">\n\t\t\t\t\t\t\t\t\t\t${this.elementCreate(t.initForm)}\n\t\t\t\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t${void 0!==t.settings.formSteps.progressBar?this.progressBar():""}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t`}button(t){return`\n\t\t<div class="${t.fields.containerClass.value}">\n\t\t${this.formStepsList.length>0?'\n\t\t\t\t<button onClick={() => this.previous()} type="button" className="btn btn-primary previous" >Anterior</button>\n\t\t\t':""}\n\t\t<button onClick={() => this.submit()} type="button" id="${t.fields.id.value}" name="${t.fields.id.value}" className="${t.fields.cssClass.value}">Enviar</button>\n\t\t</div>\n\t\t`}formSteps(t){let e="";return this.formStepsList=t.fields.steps.value,`\n\t\t<div className="steps">\n\t\t\t${t.fields.steps.value.forEach((t,a)=>{e+=`<div className="step ${0==a?"current":""}" data-step="${a}">\n\t\t\t\t\t<div className="stage">${a+1}</div> \n\t\t\t\t\t<div className="title">${t}</div>\n\t\t\t\t</div>\n\t\t\t\t`})}\n\t\t\t${e}\n\t\t</div>\n\n\t\t`}progressBar(){return'\n\t\t<div id="progress" className="progress" style={{display: "none"}}>\n\t\t\t<div id="bar" className="progress-bar" role="progressbar" style={{width: 0}}>\n\t\t\t\t<span id="percent" className="sr-only">0% Complete</span>\n\t\t\t</div>\n\t\t</div>\n\n\t\t'}}function initInterpretador(t="react",e={}){let a;return"react"==t&&(a=new React(e)),a.init()}